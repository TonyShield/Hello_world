/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef book_TYPES_H
#define book_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace example {

class Book_Info;

typedef struct _Book_Info__isset {
  _Book_Info__isset() : book_id(false), book_name(false), book_author(false), book_price(false), book_publisher(false) {}
  bool book_id :1;
  bool book_name :1;
  bool book_author :1;
  bool book_price :1;
  bool book_publisher :1;
} _Book_Info__isset;

class Book_Info {
 public:

  static const char* ascii_fingerprint; // = "5336EE826747522DE4E4045EA4440B86";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0x36,0xEE,0x82,0x67,0x47,0x52,0x2D,0xE4,0xE4,0x04,0x5E,0xA4,0x44,0x0B,0x86};

  Book_Info(const Book_Info&);
  Book_Info& operator=(const Book_Info&);
  Book_Info() : book_id(0), book_name(), book_author(), book_price(0), book_publisher() {
  }

  virtual ~Book_Info() throw();
  int32_t book_id;
  std::string book_name;
  std::string book_author;
  double book_price;
  std::string book_publisher;

  _Book_Info__isset __isset;

  void __set_book_id(const int32_t val);

  void __set_book_name(const std::string& val);

  void __set_book_author(const std::string& val);

  void __set_book_price(const double val);

  void __set_book_publisher(const std::string& val);

  bool operator == (const Book_Info & rhs) const
  {
    if (!(book_id == rhs.book_id))
      return false;
    if (!(book_name == rhs.book_name))
      return false;
    if (!(book_author == rhs.book_author))
      return false;
    if (!(book_price == rhs.book_price))
      return false;
    if (!(book_publisher == rhs.book_publisher))
      return false;
    return true;
  }
  bool operator != (const Book_Info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Book_Info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Book_Info& obj);
};

void swap(Book_Info &a, Book_Info &b);

} // namespace

#endif
